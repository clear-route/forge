// Package types provides shared types and interfaces for the Forge framework.
package types

import "time"

// MessageRole defines the role of a message in a conversation.
type MessageRole string

const (
	RoleSystem    MessageRole = "system"    // RoleSystem represents a system message that sets context or instructions.
	RoleUser      MessageRole = "user"      // RoleUser represents a message from the user/human.
	RoleAssistant MessageRole = "assistant" // RoleAssistant represents a message from the AI assistant.
	RoleTool      MessageRole = "tool"      // RoleTool represents a message generated by a tool or external system.
)

// Message represents a single message in a conversation.
type Message struct {
	// Metadata holds optional additional information about the message.
	// This can be used to store execution context, debugging info, etc.
	Metadata map[string]interface{}

	// Content is the text content of the message.
	Content string

	// Timestamp is when the message was created.
	Timestamp time.Time

	// Role indicates who sent the message (system, user, or assistant).
	Role MessageRole
}

// NewMessage creates a new Message with the given role and content.
func NewMessage(role MessageRole, content string) *Message {
	return &Message{
		Role:      role,
		Content:   content,
		Timestamp: time.Now(),
		Metadata:  make(map[string]interface{}),
	}
}

// NewSystemMessage creates a new system message.
func NewSystemMessage(content string) *Message {
	return NewMessage(RoleSystem, content)
}

// NewUserMessage creates a new user message.
func NewUserMessage(content string) *Message {
	return NewMessage(RoleUser, content)
}

// NewAssistantMessage creates a new assistant message.
func NewAssistantMessage(content string) *Message {
	return NewMessage(RoleAssistant, content)
}

// NewToolMessage creates a new tool message.
func NewToolMessage(content string) *Message {
	return NewMessage(RoleTool, content)
}

// WithMetadata adds metadata to the message and returns the message for chaining.
func (m *Message) WithMetadata(key string, value interface{}) *Message {
	if m.Metadata == nil {
		m.Metadata = make(map[string]interface{})
	}
	m.Metadata[key] = value
	return m
}
